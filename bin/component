#!/usr/bin/env node
'use strict';

const jsblueprint =
`'use strict';

import { Component } from 'barfoos2.0/core.js';
import { moduleLocations } from 'barfoos2.0/defs.js';
import { extend } from 'barfoos2.0/toolkit.js';

import html from '../markup/main.html';
import style from '../style/main.scss';

// private to module
const	priv_var1		= 'the',
		priv_var2		= 'game';

/*****************************************************************************************************
 *  "description here"
 *****************************************************************************************************/
class MyModule extends Component {
	constructor( input = { }, options = { } ) {
		extend( options ).with({
			name:			'MyModule',
			location:		moduleLocations.center,
			tmpl:			html
		}).and( input );

		super( options );

		this.runtimeDependencies.push(
			this.fire( 'SomeEvent.appEvents' ) // or any promise
		);

		return this.init();
	}

	async init() {
		// any component related declarations, bindings, listeners etc. which can get executed immediately, before we wait for possible dependencies

		await super.init();

		// any component related stuff which should wait on dependencies resolve before executing (waitForDOM at least or additional async data)

		return this;
	}

	async destroy() {
		super.destroy && super.destroy();
		[ style ].forEach( s => s.unuse() );
	}
}
/****************************************** MyModule End ******************************************/

async function start( ...args ) {
	[ style ].forEach( style => style.use() );

	return await new MyModule( ...args );
}

export { start };`;

const cssmain =
`@import '~barfoos2.0/css/viewportDefinitions';

div.MyModule {

}`;

const htmlmain = `<div class="MyModule"></div>`;

const	path	= require( 'path' ),
		fs		= require( 'fs' ),
		cmd		= require( 'commander' ),
		root	= path.resolve(),
		folders = {
			fonts:	[ ],
			images:	[ ],
			markup: [Â { 'main.html': htmlmain } ],
			js:		[ { 'main.js': jsblueprint } ],
			style:	[ { 'main.scss': cssmain } ]
		};

const mkdirSync = path => {
	try {
		fs.mkdirSync( path );
	} catch (err) {
		if (err.code !== 'EEXIST') throw err
	}
}

cmd
	.version( '0.1.0' )
	.arguments( '<moduleName>' )
	.option( '-b, --blueprint', 'create blueprint templates' )
	.action(name => {
		console.log( `creating structure:` );
		console.log( `./modules` );
		mkdirSync( `${root}/modules` );
		console.log( `./modules/${ name }` );
		mkdirSync( `${root}/modules/${ name }` );

		for( let [ folder, files ] of Object.entries( folders ) ) {
			console.log( `./modules/${ name }/${ folder }` );
			mkdirSync( `${root}/modules/${ name }/${ folder }` );

			if( cmd.blueprint ) {
				for( let file of files ) {
					Object.keys( file ).forEach( filename => {
						console.log( `./modules/${ name }/${ folder }/${ filename }` );
						fs.writeFileSync( `${root}/modules/${ name }/${ folder }/${ filename }`, file[ filename ].replace( /MyModule/g, name) );
					});
				}
			}
		}
	}).parse( process.argv );
